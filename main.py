import marshal
exec(marshal.loads('c\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s!\x00\x00\x00d\x00\x00d\x01\x00l\x00\x00Z\x00\x00e\x00\x00j\x01\x00d\x02\x00\x83\x01\x00d\x01\x00\x04Ud\x01\x00S(\x03\x00\x00\x00i\xff\xff\xff\xffNs\xc8\x1d\x00\x00aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHJhbmRvbQppbXBvcnQgc29ja2V0CmltcG9ydCBzZWxlY3QKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aHJlYWRpbmcKCmxvY2sgPSB0aHJlYWRpbmcuUkxvY2soKTsgb3Muc3lzdGVtKCdjbHMnIGlmIG9zLm5hbWUgPT0gJ250JyBlbHNlICdjbGVhcicpCgpkZWYgcmVhbF9wYXRoKGZpbGVfbmFtZSk6CiAgICByZXR1cm4gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aChfX2ZpbGVfXykpICsgZmlsZV9uYW1lCgpkZWYgZmlsdGVyX2FycmF5KGFycmF5KToKICAgIGZvciBpIGluIHJhbmdlKGxlbihhcnJheSkpOgogICAgICAgIGFycmF5W2ldID0gYXJyYXlbaV0uc3RyaXAoKQogICAgICAgIGlmIGFycmF5W2ldLnN0YXJ0c3dpdGgoJyMnKToKICAgICAgICAgICAgYXJyYXlbaV0gPSAnJwoKICAgIHJldHVybiBbeCBmb3IgeCBpbiBhcnJheSBpZiB4XQoKZGVmIGNvbG9ycyh2YWx1ZSk6CiAgICBwYXR0ZXJucyA9IHsKICAgICAgICAnUjEnIDogJ1wwMzNbMzE7MW0nLCAnUjInIDogJ1wwMzNbMzE7Mm0nLAogICAgICAgICdHMScgOiAnXDAzM1szMjsxbScsICdZMScgOiAnXDAzM1szMzsxbScsCiAgICAgICAgJ1AxJyA6ICdcMDMzWzM1OzFtJywgJ0NDJyA6ICdcMDMzWzBtJwogICAgfQoKICAgIGZvciBjb2RlIGluIHBhdHRlcm5zOgogICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnW3t9XScuZm9ybWF0KGNvZGUpLCBwYXR0ZXJuc1tjb2RlXSkKCiAgICByZXR1cm4gdmFsdWUKCmRlZiBsb2codmFsdWUsIHN0YXR1cz0nW0luamVjdCBHYW1lTWF4XScsIGNvbG9yPSdbQ0NdJyk6CiAgICB2YWx1ZSA9IGNvbG9ycygne2NvbG9yfScnW0NDXScnW3t0aW1lfV0gW0NDXXtjb2xvcn17c3RhdHVzfSBbQ0Nde2NvbG9yfXt2YWx1ZX1bQ0NdJy5mb3JtYXQoCiAgICAgICAgdGltZT1kYXRldGltZS5kYXRldGltZS5ub3coKS5zdHJmdGltZSgnJUg6JU06JVMnKSwKICAgICAgICB2YWx1ZT12YWx1ZSwKICAgICAgICBjb2xvcj1jb2xvciwKICAgICAgICBzdGF0dXM9c3RhdHVzCiAgICApKQogICAgd2l0aCBsb2NrOiBwcmludCh2YWx1ZSkKCmRlZiBsb2dfcmVwbGFjZSh2YWx1ZSwgc3RhdHVzPSdXQVJOSU5HJywgY29sb3I9J1tZMV0nKToKICAgIHZhbHVlID0gY29sb3JzKCd7fXt9ICh7fSkgICAgICAgIFtDQ11ccicuZm9ybWF0KGNvbG9yLCBzdGF0dXMsIHZhbHVlKSkKICAgIHdpdGggbG9jazoKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKHZhbHVlKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQoKY2xhc3MgaW5qZWN0KG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgaW5qZWN0X2hvc3QsIGluamVjdF9wb3J0KToKICAgICAgICBzdXBlcihpbmplY3QsIHNlbGYpLl9faW5pdF9fKCkKCiAgICAgICAgc2VsZi5pbmplY3RfaG9zdCA9IHN0cihpbmplY3RfaG9zdCkKICAgICAgICBzZWxmLmluamVjdF9wb3J0ID0gaW50KGluamVjdF9wb3J0KQoKICAgIGRlZiBsb2coc2VsZiwgdmFsdWUsIGNvbG9yPSdbRzFdJyk6CiAgICAgICAgbG9nKHZhbHVlLCBjb2xvcj1jb2xvcikKCiAgICBkZWYgc3RhcnQoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzb2NrZXRfc2VydmVyID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQogICAgICAgICAgICBzb2NrZXRfc2VydmVyLmJpbmQoKHNlbGYuaW5qZWN0X2hvc3QsIHNlbGYuaW5qZWN0X3BvcnQpKQogICAgICAgICAgICBzb2NrZXRfc2VydmVyLmxpc3RlbigxKQogICAgICAgICAgICBmcm9udGVuZF9kb21haW5zID0gb3BlbihyZWFsX3BhdGgoJy9jb25maWcuaW5pJykpLnJlYWRsaW5lcygpCiAgICAgICAgICAgIGZyb250ZW5kX2RvbWFpbnMgPSBmaWx0ZXJfYXJyYXkoZnJvbnRlbmRfZG9tYWlucykKICAgICAgICAgICAgaWYgbGVuKGZyb250ZW5kX2RvbWFpbnMpID09IDA6CiAgICAgICAgICAgICAgICBzZWxmLmxvZygnRnJvbnRlbmQgRG9tYWlucyBub3QgZm91bmQuIFBsZWFzZSBjaGVjayBjb25maWcuaW5pJywgY29sb3I9J1tZMV0nKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIHNlbGYubG9nKCdTSUFQIScuZm9ybWF0KHNlbGYuaW5qZWN0X2hvc3QsIHNlbGYuaW5qZWN0X3BvcnQpKQogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc29ja2V0X2NsaWVudCwgXyA9IHNvY2tldF9zZXJ2ZXIuYWNjZXB0KCkKICAgICAgICAgICAgICAgIHNvY2tldF9jbGllbnQucmVjdig2NTUzNSkKICAgICAgICAgICAgICAgIGRvbWFpbl9mcm9udGluZyhzb2NrZXRfY2xpZW50LCBmcm9udGVuZF9kb21haW5zKS5zdGFydCgpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleGNlcHRpb246CiAgICAgICAgICAgIHNlbGYubG9nKCdlcnJvciBzaWFsYWthbiAgY2xvc2UgcHJveHkgdHVubmVsIGRhbiBxcHl0b24gZGFuIG11bGFpIHVsYW5nJy5mb3JtYXQoc2VsZi5pbmplY3RfaG9zdCwgc2VsZi5pbmplY3RfcG9ydCksIGNvbG9yPSdbUjFdJykKCmNsYXNzIGRvbWFpbl9mcm9udGluZyh0aHJlYWRpbmcuVGhyZWFkKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzb2NrZXRfY2xpZW50LCBmcm9udGVuZF9kb21haW5zKToKICAgICAgICBzdXBlcihkb21haW5fZnJvbnRpbmcsIHNlbGYpLl9faW5pdF9fKCkKCiAgICAgICAgc2VsZi5mcm9udGVuZF9kb21haW5zID0gZnJvbnRlbmRfZG9tYWlucwogICAgICAgIHNlbGYuc29ja2V0X3R1bm5lbCA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKICAgICAgICBzZWxmLnNvY2tldF9jbGllbnQgPSBzb2NrZXRfY2xpZW50CiAgICAgICAgc2VsZi5idWZmZXJfc2l6ZSA9IDY1NTM1CiAgICAgICAgc2VsZi5kYWVtb24gPSBUcnVlCgogICAgZGVmIGxvZyhzZWxmLCB2YWx1ZSwgc3RhdHVzPSdbUDFdSU5KRUNUJywgY29sb3I9J1tDQ10nKToKICAgICAgICBsb2codmFsdWUsIHN0YXR1cz1zdGF0dXMsIGNvbG9yPWNvbG9yKQogICAgICAgIAogICAgZGVmIGhhbmRsZXIoc2VsZiwgc29ja2V0X3R1bm5lbCwgc29ja2V0X2NsaWVudCwgYnVmZmVyX3NpemUpOgogICAgICAgIHNvY2tldHMgPSBbc29ja2V0X3R1bm5lbCwgc29ja2V0X2NsaWVudF0KICAgICAgICB0aW1lb3V0ID0gMAogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRpbWVvdXQgKz0gMQogICAgICAgICAgICBzb2NrZXRfaW8sIF8sIGVycm9ycyA9IHNlbGVjdC5zZWxlY3Qoc29ja2V0cywgW10sIHNvY2tldHMsIDMpCiAgICAgICAgICAgIGlmIGVycm9yczogYnJlYWsKICAgICAgICAgICAgaWYgc29ja2V0X2lvOgogICAgICAgICAgICAgICAgZm9yIHNvY2sgaW4gc29ja2V0X2lvOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHNvY2sucmVjdihidWZmZXJfc2l6ZSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGRhdGE6IGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICMgU0VOVCAtPiBSRUNFSVZFRAogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHNvY2sgaXMgc29ja2V0X2NsaWVudDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldF90dW5uZWwuc2VuZGFsbChkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHNvY2sgaXMgc29ja2V0X3R1bm5lbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldF9jbGllbnQuc2VuZGFsbChkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gMAogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogYnJlYWsKICAgICAgICAgICAgaWYgdGltZW91dCA9PSAzMDogYnJlYWsKCiAgICBkZWYgcnVuKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5wcm94eV9ob3N0X3BvcnQgPSByYW5kb20uY2hvaWNlKHNlbGYuZnJvbnRlbmRfZG9tYWlucykuc3BsaXQoJzonKQogICAgICAgICAgICBzZWxmLnByb3h5X2hvc3QgPSBzZWxmLnByb3h5X2hvc3RfcG9ydFswXQogICAgICAgICAgICBzZWxmLnByb3h5X3BvcnQgPSBzZWxmLnByb3h5X2hvc3RfcG9ydFsxXSBpZiBsZW4oc2VsZi5wcm94eV9ob3N0X3BvcnQpID49IDIgYW5kIHNlbGYucHJveHlfaG9zdF9wb3J0WzFdIGVsc2UgJzQ0MycKICAgICAgICAgICAgc2VsZi5sb2coJ1tSMV1zdGF0dXMgNDAzICcuZm9ybWF0KHNlbGYucHJveHlfaG9zdCwgc2VsZi5wcm94eV9wb3J0KSkKICAgICAgICAgICAgc2VsZi5zb2NrZXRfdHVubmVsLmNvbm5lY3QoKHN0cihzZWxmLnByb3h5X2hvc3QpLCBpbnQoc2VsZi5wcm94eV9wb3J0KSkpCiAgICAgICAgICAgIHNlbGYuc29ja2V0X2NsaWVudC5zZW5kYWxsKGInSFRUUC8xLjEgMjAwIE9LXHJcblxyXG4nKQogICAgICAgICAgICBzZWxmLmhhbmRsZXIoc2VsZi5zb2NrZXRfdHVubmVsLCBzZWxmLnNvY2tldF9jbGllbnQsIHNlbGYuYnVmZmVyX3NpemUpCiAgICAgICAgICAgIHNlbGYuc29ja2V0X2NsaWVudC5jbG9zZSgpCiAgICAgICAgICAgIHNlbGYuc29ja2V0X3R1bm5lbC5jbG9zZSgpCiAgICAgICAgICAgIHNlbGYubG9nKCdbRzFdMjAwIG9rJydbQ0NdJy5mb3JtYXQoc2VsZi5wcm94eV9ob3N0LCBzZWxmLnByb3h5X3BvcnQpLCBjb2xvcj0nW0NDXScpCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgIHNlbGYubG9nKCdDb25uZWN0aW9uIEVycm9yJywgY29sb3I9J1tDQ10nKQogICAgICAgIGV4Y2VwdCBUaW1lb3V0RXJyb3I6CiAgICAgICAgICAgIHNlbGYubG9nKCd7fSBOb3QgUmVzcG9uZGluZycuZm9ybWF0KHNlbGYucHJveHlfaG9zdCksIGNvbG9yPSdbUjFdJykKCkcgPSAnXDAzM1sxOzMzbScKCnByaW50IEcgKyAnKHxfRl9BX1NfVCBDX09fTl9FX0NfVCBHX0FfTV9FX01fQV9YX3wpIFxuJwoKcHJpbnQoY29sb3JzKCdcbicuam9pbihbCiAgICAgICAgJ1tHMV1bIV0gLSBNb2RlIFNhYmFyIEJpYXIgTmdnYWsgQW1ieWFyJywnW0NDXScKICAgICAgICAnW0cxXVshXSAtIFNlcnZlciBTaW5nYXBvcmUnLCdbQ0NdJwogICAgICAgICdbRzFdWyFdIC0gSVAgMTI3LjAuMC4xJywnW0NDXScKICAgICAgICAnW0cxXVshXSAtIFBvcnQgODA4MCcsJ1tDQ10nCiAgICAgICAgJ1tHMV1bIV0gLSBUZXJpbWFrYXNpaCBUZWxhaCBHdW5haW4gVG9vbCBLYW1pJywnW0NDXScgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScsJ1tDQ10nCiAgICAgICAnW1IxXSAgID4+PnxbIV1EZXZlbG9wZXJzOk55aXB0byBOYW5kYVshXXw8PDwnLCdbQ0NdJyAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JywnW0NDXScKICAgICAgICAnICAgICAgICBbIV0gVGVsa29tc2VsIEdhbWVNYXggWyFdJywnW0NDXScKICAgICAgICAKICAgIF0pKSkKZGVmIG1haW4oKToKICAgIEQgPSAnIFtHMV1bIV0gbWFzdWtpbiBwYXNzd29yZCBueWEgIScKICAgIFllcyA9ICdnYmxrJwogICAgdXNlcl9pbnB1dCA9IHJhd19pbnB1dCgnIFshXSBpbnB1dCBwYXNzd29yZCBbIV0gOiAnKQogICAgaWYgdXNlcl9pbnB1dCAhPSBZZXM6CiAgICAgICAgc3lzLmV4aXQoJyBbIV0gcGFzc3dvcmQgc2FsYWggWyFdXG4nKQogICAgcHJpbnQgJyBbIV0gUGFzc3dvcmQgQmVuYXIgOikgWyFdXG4nCiAgICBpbmplY3QoJzEyNy4wLjAuMScsICc4MDgwJykuc3RhcnQoKQoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQ==(\x02\x00\x00\x00t\x06\x00\x00\x00base64t\t\x00\x00\x00b64decode(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\x02\x00\x00\x00dgt\x08\x00\x00\x00<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x0c\x01'))